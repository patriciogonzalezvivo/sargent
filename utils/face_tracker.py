import numpy as np
import cv2
from mediapipe import solutions

canonical_indices = [[173, 155, 133], [246, 33, 7], [382, 398, 362], [263, 466, 249], [308, 415, 324], [78, 95, 191], [356, 389, 264], [127, 34, 162], [368, 264, 389], [139, 162, 34], [267, 0, 302], [37, 72, 0], [11, 302, 0], [11, 0, 72], [349, 451, 350], [120, 121, 231], [452, 350, 451], [232, 231, 121], [267, 302, 269], [37, 39, 72], [303, 269, 302], [73, 72, 39], [357, 343, 350], [128, 121, 114], [277, 350, 343], [47, 114, 121], [350, 452, 357], [121, 128, 232], [453, 357, 452], [233, 232, 128], [299, 333, 297], [69, 67, 104], [332, 297, 333], [103, 104, 67], [175, 152, 396], [175, 171, 152], [377, 396, 152], [148, 152, 171], [381, 384, 382], [154, 155, 157], [398, 382, 384], [173, 157, 155], [280, 347, 330], [50, 101, 118], [348, 330, 347], [119, 118, 101], [269, 303, 270], [39, 40, 73], [304, 270, 303], [74, 73, 40], [9, 336, 151], [9, 151, 107], [337, 151, 336], [108, 107, 151], [344, 278, 360], [115, 131, 48], [279, 360, 278], [49, 48, 131], [262, 431, 418], [32, 194, 211], [424, 418, 431], [204, 211, 194], [304, 408, 270], [74, 40, 184], [409, 270, 408], [185, 184, 40], [272, 310, 407], [42, 183, 80], [415, 407, 310], [191, 80, 183], [322, 270, 410], [92, 186, 40], [409, 410, 270], [185, 40, 186], [347, 449, 348], [118, 119, 229], [450, 348, 449], [230, 229, 119], [434, 432, 430], [214, 210, 212], [422, 430, 432], [202, 212, 210], [313, 314, 18], [83, 18, 84], [17, 18, 314], [17, 84, 18], [307, 375, 306], [77, 76, 146], [291, 306, 375], [61, 146, 76], [259, 387, 260], [29, 30, 160], [388, 260, 387], [161, 160, 30], [286, 414, 384], [56, 157, 190], [398, 384, 414], [173, 190, 157], [418, 424, 406], [194, 182, 204], [335, 406, 424], [106, 204, 182], [367, 416, 364], [138, 135, 192], [434, 364, 416], [214, 192, 135], [391, 423, 327], [165, 98, 203], [358, 327, 423], [129, 203, 98], [298, 301, 284], [68, 54, 71], [251, 284, 301], [21, 71, 54], [4, 275, 5], [4, 5, 45], [281, 5, 275], [51, 45, 5], [254, 373, 253], [24, 23, 144], [374, 253, 373], [145, 144, 23], [320, 321, 307], [90, 77, 91], [375, 307, 321], [146, 91, 77], [280, 425, 411], [50, 187, 205], [427, 411, 425], [207, 205, 187], [421, 313, 200], [201, 200, 83], [18, 200, 313], [18, 83, 200], [335, 321, 406], [106, 182, 91], [405, 406, 321], [181, 91, 182], [405, 321, 404], [181, 180, 91], [320, 404, 321], [90, 91, 180], [17, 314, 16], [17, 16, 84], [315, 16, 314], [85, 84, 16], [425, 266, 426], [205, 206, 36], [423, 426, 266], [203, 36, 206], [369, 396, 400], [140, 176, 171], [377, 400, 396], [148, 171, 176], [391, 269, 322], [165, 92, 39], [270, 322, 269], [40, 39, 92], [417, 465, 413], [193, 189, 245], [464, 413, 465], [244, 245, 189], [257, 258, 386], [27, 159, 28], [385, 386, 258], [158, 28, 159], [260, 388, 467], [30, 247, 161], [466, 467, 388], [246, 161, 247], [248, 456, 419], [3, 196, 236], [399, 419, 456], [174, 236, 196], [333, 298, 332], [104, 103, 68], [284, 332, 298], [54, 68, 103], [285, 8, 417], [55, 193, 8], [168, 417, 8], [168, 8, 193], [340, 261, 346], [111, 117, 31], [448, 346, 261], [228, 31, 117], [285, 417, 441], [55, 221, 193], [413, 441, 417], [189, 193, 221], [327, 460, 326], [98, 97, 240], [328, 326, 460], [99, 240, 97], [277, 355, 329], [47, 100, 126], [371, 329, 355], [142, 126, 100], [309, 392, 438], [79, 218, 166], [439, 438, 392], [219, 166, 218], [381, 382, 256], [154, 26, 155], [341, 256, 382], [112, 155, 26], [360, 279, 420], [131, 198, 49], [429, 420, 279], [209, 49, 198], [365, 364, 379], [136, 150, 135], [394, 379, 364], [169, 135, 150], [355, 277, 437], [126, 217, 47], [343, 437, 277], [114, 47, 217], [443, 444, 282], [223, 52, 224], [283, 282, 444], [53, 224, 52], [281, 275, 363], [51, 134, 45], [440, 363, 275], [220, 45, 134], [431, 262, 395], [211, 170, 32], [369, 395, 262], [140, 32, 170], [337, 299, 338], [108, 109, 69], [297, 338, 299], [67, 69, 109], [335, 273, 321], [106, 91, 43], [375, 321, 273], [146, 43, 91], [348, 450, 349], [119, 120, 230], [451, 349, 450], [231, 230, 120], [467, 359, 342], [247, 113, 130], [446, 342, 359], [226, 130, 113], [282, 283, 334], [52, 105, 53], [293, 334, 283], [63, 53, 105], [250, 458, 462], [20, 242, 238], [461, 462, 458], [241, 238, 242], [276, 353, 300], [46, 70, 124], [383, 300, 353], [156, 124, 70], [325, 292, 324], [96, 95, 62], [308, 324, 292], [78, 62, 95], [283, 276, 293], [53, 63, 46], [300, 293, 276], [70, 46, 63], [447, 264, 345], [227, 116, 34], [372, 345, 264], [143, 34, 116], [352, 345, 346], [123, 117, 116], [340, 346, 345], [111, 116, 117], [1, 19, 274], [1, 44, 19], [354, 274, 19], [125, 19, 44], [248, 281, 456], [3, 236, 51], [363, 456, 281], [134, 51, 236], [425, 426, 427], [205, 207, 206], [436, 427, 426], [216, 206, 207], [380, 381, 252], [153, 22, 154], [256, 252, 381], [26, 154, 22], [391, 393, 269], [165, 39, 167], [267, 269, 393], [37, 167, 39], [199, 428, 200], [199, 200, 208], [421, 200, 428], [201, 208, 200], [330, 329, 266], [101, 36, 100], [371, 266, 329], [142, 100, 36], [422, 432, 273], [202, 43, 212], [287, 273, 432], [57, 212, 43], [290, 250, 328], [60, 99, 20], [462, 328, 250], [242, 20, 99], [258, 286, 385], [28, 158, 56], [384, 385, 286], [157, 56, 158], [342, 446, 353], [113, 124, 226], [265, 353, 446], [35, 226, 124], [257, 386, 259], [27, 29, 159], [387, 259, 386], [160, 159, 29], [430, 422, 431], [210, 211, 202], [424, 431, 422], [204, 202, 211], [445, 342, 276], [225, 46, 113], [353, 276, 342], [124, 113, 46], [424, 422, 335], [204, 106, 202], [273, 335, 422], [43, 202, 106], [306, 292, 307], [76, 77, 62], [325, 307, 292], [96, 62, 77], [366, 447, 352], [137, 123, 227], [345, 352, 447], [116, 227, 123], [302, 268, 303], [72, 73, 38], [271, 303, 268], [41, 38, 73], [371, 358, 266], [142, 36, 129], [423, 266, 358], [203, 129, 36], [327, 294, 460], [98, 240, 64], [455, 460, 294], [235, 64, 240], [294, 331, 278], [64, 48, 102], [279, 278, 331], [49, 102, 48], [303, 271, 304], [73, 74, 41], [272, 304, 271], [42, 41, 74], [427, 436, 434], [207, 214, 216], [432, 434, 436], [212, 216, 214], [304, 272, 408], [74, 184, 42], [407, 408, 272], [183, 42, 184], [394, 430, 395], [169, 170, 210], [431, 395, 430], [211, 210, 170], [395, 369, 378], [170, 149, 140], [400, 378, 369], [176, 140, 149], [296, 334, 299], [66, 69, 105], [333, 299, 334], [104, 105, 69], [417, 168, 351], [193, 122, 168], [6, 351, 168], [6, 168, 122], [280, 411, 352], [50, 123, 187], [376, 352, 411], [147, 187, 123], [319, 320, 325], [89, 96, 90], [307, 325, 320], [77, 90, 96], [285, 295, 336], [55, 107, 65], [296, 336, 295], [66, 65, 107], [404, 320, 403], [180, 179, 90], [319, 403, 320], [89, 90, 179], [330, 348, 329], [101, 100, 119], [349, 329, 348], [120, 119, 100], [334, 293, 333], [105, 104, 63], [298, 333, 293], [68, 63, 104], [323, 454, 366], [93, 137, 234], [447, 366, 454], [227, 234, 137], [16, 315, 15], [16, 15, 85], [316, 15, 315], [86, 85, 15], [429, 279, 358], [209, 129, 49], [331, 358, 279], [102, 49, 129], [15, 316, 14], [15, 14, 86], [317, 14, 316], [87, 86, 14], [8, 285, 9], [8, 9, 55], [336, 9, 285], [107, 55, 9], [329, 349, 277], [100, 47, 120], [350, 277, 349], [121, 120, 47], [252, 253, 380], [22, 153, 23], [374, 380, 253], [145, 23, 153], [402, 403, 318], [178, 88, 179], [319, 318, 403], [89, 179, 88], [351, 6, 419], [122, 196, 6], [197, 419, 6], [197, 6, 196], [324, 318, 325], [95, 96, 88], [319, 325, 318], [89, 88, 96], [397, 367, 365], [172, 136, 138], [364, 365, 367], [135, 138, 136], [288, 435, 397], [58, 172, 215], [367, 397, 435], [138, 215, 172], [438, 439, 344], [218, 115, 219], [278, 344, 439], [48, 219, 115], [271, 311, 272], [41, 42, 81], [310, 272, 311], [80, 81, 42], [5, 281, 195], [5, 195, 51], [248, 195, 281], [3, 51, 195], [273, 287, 375], [43, 146, 57], [291, 375, 287], [61, 57, 146], [396, 428, 175], [171, 175, 208], [199, 175, 428], [199, 208, 175], [268, 312, 271], [38, 41, 82], [311, 271, 312], [81, 82, 41], [444, 445, 283], [224, 53, 225], [276, 283, 445], [46, 225, 53], [254, 339, 373], [24, 144, 110], [390, 373, 339], [163, 110, 144], [295, 282, 296], [65, 66, 52], [334, 296, 282], [105, 52, 66], [346, 448, 347], [117, 118, 228], [449, 347, 448], [229, 228, 118], [454, 356, 447], [234, 227, 127], [264, 447, 356], [34, 127, 227], [336, 296, 337], [107, 108, 66], [299, 337, 296], [69, 66, 108], [151, 337, 10], [151, 10, 108], [338, 10, 337], [109, 108, 10], [278, 439, 294], [48, 64, 219], [455, 294, 439], [235, 219, 64], [407, 415, 292], [183, 62, 191], [308, 292, 415], [78, 191, 62], [358, 371, 429], [129, 209, 142], [355, 429, 371], [126, 142, 209], [345, 372, 340], [116, 111, 143], [265, 340, 372], [35, 143, 111], [388, 390, 466], [161, 246, 163], [249, 466, 390], [7, 163, 246], [352, 346, 280], [123, 50, 117], [347, 280, 346], [118, 117, 50], [295, 442, 282], [65, 52, 222], [443, 282, 442], [223, 222, 52], [19, 94, 354], [19, 125, 94], [370, 354, 94], [141, 94, 125], [295, 285, 442], [65, 222, 55], [441, 442, 285], [221, 55, 222], [419, 197, 248], [196, 3, 197], [195, 248, 197], [195, 197, 3], [359, 263, 255], [130, 25, 33], [249, 255, 263], [7, 33, 25], [275, 274, 440], [45, 220, 44], [457, 440, 274], [237, 44, 220], [300, 383, 301], [70, 71, 156], [368, 301, 383], [139, 156, 71], [417, 351, 465], [193, 245, 122], [412, 465, 351], [188, 122, 245], [466, 263, 467], [246, 247, 33], [359, 467, 263], [130, 33, 247], [389, 251, 368], [162, 139, 21], [301, 368, 251], [71, 21, 139], [374, 386, 380], [145, 153, 159], [385, 380, 386], [158, 159, 153], [379, 394, 378], [150, 149, 169], [395, 378, 394], [170, 169, 149], [351, 419, 412], [122, 188, 196], [399, 412, 419], [174, 196, 188], [426, 322, 436], [206, 216, 92], [410, 436, 322], [186, 92, 216], [387, 373, 388], [160, 161, 144], [390, 388, 373], [163, 144, 161], [393, 326, 164], [167, 164, 97], [2, 164, 326], [2, 97, 164], [354, 370, 461], [125, 241, 141], [462, 461, 370], [242, 141, 241], [0, 267, 164], [0, 164, 37], [393, 164, 267], [167, 37, 164], [11, 12, 302], [11, 72, 12], [268, 302, 12], [38, 12, 72], [386, 374, 387], [159, 160, 145], [373, 387, 374], [144, 145, 160], [12, 13, 268], [12, 38, 13], [312, 268, 13], [82, 13, 38], [293, 300, 298], [63, 68, 70], [301, 298, 300], [71, 70, 68], [340, 265, 261], [111, 31, 35], [446, 261, 265], [226, 35, 31], [380, 385, 381], [153, 154, 158], [384, 381, 385], [157, 158, 154], [280, 330, 425], [50, 205, 101], [266, 425, 330], [36, 101, 205], [423, 391, 426], [203, 206, 165], [322, 426, 391], [92, 165, 206], [429, 355, 420], [209, 198, 126], [437, 420, 355], [217, 126, 198], [391, 327, 393], [165, 167, 98], [326, 393, 327], [97, 98, 167], [457, 438, 440], [237, 220, 218], [344, 440, 438], [115, 218, 220], [382, 362, 341], [155, 112, 133], [463, 341, 362], [243, 133, 112], [457, 461, 459], [237, 239, 241], [458, 459, 461], [238, 241, 239], [434, 430, 364], [214, 135, 210], [394, 364, 430], [169, 210, 135], [414, 463, 398], [190, 173, 243], [362, 398, 463], [133, 243, 173], [262, 428, 369], [32, 140, 208], [396, 369, 428], [171, 208, 140], [457, 274, 461], [237, 241, 44], [354, 461, 274], [125, 44, 241], [316, 403, 317], [86, 87, 179], [402, 317, 403], [178, 179, 87], [315, 404, 316], [85, 86, 180], [403, 316, 404], [179, 180, 86], [314, 405, 315], [84, 85, 181], [404, 315, 405], [180, 181, 85], [313, 406, 314], [83, 84, 182], [405, 314, 406], [181, 182, 84], [418, 406, 421], [194, 201, 182], [313, 421, 406], [83, 182, 201], [366, 401, 323], [137, 93, 177], [361, 323, 401], [132, 177, 93], [408, 407, 306], [184, 76, 183], [292, 306, 407], [62, 183, 76], [408, 306, 409], [184, 185, 76], [291, 409, 306], [61, 76, 185], [410, 409, 287], [186, 57, 185], [291, 287, 409], [61, 185, 57], [436, 410, 432], [216, 212, 186], [287, 432, 410], [57, 186, 212], [434, 416, 427], [214, 207, 192], [411, 427, 416], [187, 192, 207], [264, 368, 372], [34, 143, 139], [383, 372, 368], [156, 139, 143], [457, 459, 438], [237, 218, 239], [309, 438, 459], [79, 239, 218], [352, 376, 366], [123, 137, 147], [401, 366, 376], [177, 147, 137], [4, 1, 275], [4, 45, 1], [274, 275, 1], [44, 1, 45], [428, 262, 421], [208, 201, 32], [418, 421, 262], [194, 32, 201], [327, 358, 294], [98, 64, 129], [331, 294, 358], [102, 129, 64], [367, 435, 416], [138, 192, 215], [433, 416, 435], [213, 215, 192], [455, 439, 289], [235, 59, 219], [392, 289, 439], [166, 219, 59], [328, 462, 326], [99, 97, 242], [370, 326, 462], [141, 242, 97], [326, 370, 2], [97, 2, 141], [94, 2, 370], [94, 141, 2], [460, 455, 305], [240, 75, 235], [289, 305, 455], [59, 235, 75], [448, 339, 449], [228, 229, 110], [254, 449, 339], [24, 110, 229], [261, 446, 255], [31, 25, 226], [359, 255, 446], [130, 226, 25], [449, 254, 450], [229, 230, 24], [253, 450, 254], [23, 24, 230], [450, 253, 451], [230, 231, 23], [252, 451, 253], [22, 23, 231], [451, 252, 452], [231, 232, 22], [256, 452, 252], [26, 22, 232], [256, 341, 452], [26, 232, 112], [453, 452, 341], [233, 112, 232], [413, 464, 414], [189, 190, 244], [463, 414, 464], [243, 244, 190], [441, 413, 286], [221, 56, 189], [414, 286, 413], [190, 189, 56], [441, 286, 442], [221, 222, 56], [258, 442, 286], [28, 56, 222], [442, 258, 443], [222, 223, 28], [257, 443, 258], [27, 28, 223], [444, 443, 259], [224, 29, 223], [257, 259, 443], [27, 223, 29], [259, 260, 444], [29, 224, 30], [445, 444, 260], [225, 30, 224], [260, 467, 445], [30, 225, 247], [342, 445, 467], [113, 247, 225], [250, 309, 458], [20, 238, 79], [459, 458, 309], [239, 79, 238], [290, 305, 392], [60, 166, 75], [289, 392, 305], [59, 75, 166], [460, 305, 328], [240, 99, 75], [290, 328, 305], [60, 75, 99], [376, 433, 401], [147, 177, 213], [435, 401, 433], [215, 213, 177], [250, 290, 309], [20, 79, 60], [392, 309, 290], [166, 60, 79], [411, 416, 376], [187, 147, 192], [433, 376, 416], [213, 192, 147], [341, 463, 453], [112, 233, 243], [464, 453, 463], [244, 243, 233], [453, 464, 357], [233, 128, 244], [465, 357, 464], [245, 244, 128], [412, 343, 465], [188, 245, 114], [357, 465, 343], [128, 114, 245], [437, 343, 399], [217, 174, 114], [412, 399, 343], [188, 114, 174], [363, 440, 360], [134, 131, 220], [344, 360, 440], [115, 220, 131], [456, 420, 399], [236, 174, 198], [437, 399, 420], [217, 198, 174], [456, 363, 420], [236, 198, 134], [360, 420, 363], [131, 134, 198], [361, 401, 288], [132, 58, 177], [435, 288, 401], [215, 177, 58], [353, 265, 383], [124, 156, 35], [372, 383, 265], [143, 35, 156], [255, 249, 339], [25, 110, 7], [390, 339, 249], [163, 7, 110], [261, 255, 448], [31, 228, 25], [339, 448, 255], [110, 25, 228], [14, 317, 13], [14, 13, 87], [312, 13, 317], [82, 87, 13], [317, 402, 312], [87, 82, 178], [311, 312, 402], [81, 178, 82], [402, 318, 311], [178, 81, 88], [310, 311, 318], [80, 88, 81], [318, 324, 310], [88, 80, 95], [415, 310, 324], [191, 95, 80]]
canonical_uvs = [[0.4999769926071167, 0.34746599197387695], [0.5000259876251221, 0.4525130093097687], [0.49997401237487793, 0.3976280093193054], [0.4821130037307739, 0.528020977973938], [0.5001509785652161, 0.4728440046310425], [0.49990999698638916, 0.5017470121383667], [0.49952301383018494, 0.59893798828125], [0.28971201181411743, 0.6192359924316406], [0.4999549984931946, 0.6876019835472107], [0.49998700618743896, 0.7300810217857361], [0.5000230073928833, 0.8929499983787537], [0.5000230073928833, 0.33376601338386536], [0.5000159740447998, 0.32077598571777344], [0.5000230073928833, 0.30765199661254883], [0.4999769926071167, 0.30472201108932495], [0.4999769926071167, 0.29406601190567017], [0.4999769926071167, 0.2806150019168854], [0.4999769926071167, 0.26298099756240845], [0.4999679923057556, 0.21862900257110596], [0.49981600046157837, 0.4370189905166626], [0.4737730026245117, 0.4260900020599365], [0.10490699857473373, 0.7458590269088745], [0.3659299910068512, 0.5904240012168884], [0.3387579917907715, 0.5869749784469604], [0.31112000346183777, 0.5905399918556213], [0.2746579945087433, 0.6108689904212952], [0.39336198568344116, 0.5962939858436584], [0.3452340066432953, 0.6559889912605286], [0.3700940012931824, 0.6539239883422852], [0.31932199001312256, 0.6527349948883057], [0.29790300130844116, 0.6464089751243591], [0.24779200553894043, 0.5891900062561035], [0.39688900113105774, 0.1572449952363968], [0.28009799122810364, 0.6244000196456909], [0.10631000250577927, 0.6000440120697021], [0.20992499589920044, 0.6086469888687134], [0.35580798983573914, 0.46559399366378784], [0.47175100445747375, 0.3495959937572479], [0.4741550087928772, 0.3198080062866211], [0.4397850036621094, 0.3427709937095642], [0.41461700201034546, 0.3334589898586273], [0.4503740072250366, 0.3191390037536621], [0.4287709891796112, 0.3173089921474457], [0.3749710023403168, 0.2721950113773346], [0.48671698570251465, 0.4523710012435913], [0.4853009879589081, 0.47260499000549316], [0.257764995098114, 0.685509979724884], [0.40122300386428833, 0.5448279976844788], [0.4298189878463745, 0.4513849914073944], [0.42135199904441833, 0.4662590026855469], [0.27689599990844727, 0.467943012714386], [0.48337000608444214, 0.5004130005836487], [0.3372119963169098, 0.7171170115470886], [0.2963919937610626, 0.7067570090293884], [0.16929499804973602, 0.8061860203742981], [0.4475800096988678, 0.6973900198936462], [0.39239001274108887, 0.6461120247840881], [0.3544900119304657, 0.30321601033210754], [0.06730499863624573, 0.2698949873447418], [0.44273900985717773, 0.42717400193214417], [0.45709800720214844, 0.41520801186561584], [0.3819740116596222, 0.30528900027275085], [0.3923889994621277, 0.3057970106601715], [0.27707600593566895, 0.7280679941177368], [0.4225519895553589, 0.43676701188087463], [0.3859190046787262, 0.7186359763145447], [0.38310301303863525, 0.744159996509552], [0.33143100142478943, 0.8802859783172607], [0.22992399334907532, 0.7679970264434814], [0.3645009994506836, 0.810886025428772], [0.2296220064163208, 0.7004590034484863], [0.17328700423240662, 0.7212520241737366], [0.47287899255752563, 0.3338020145893097], [0.4468280076980591, 0.3314729928970337], [0.422762006521225, 0.32611000537872314], [0.44530799984931946, 0.4199340045452118], [0.38810300827026367, 0.3060390055179596], [0.40303900837898254, 0.29346001148223877], [0.40362900495529175, 0.3060469925403595], [0.46004199981689453, 0.44286099076271057], [0.43115800619125366, 0.30763399600982666], [0.45218199491500854, 0.30763399600982666], [0.47538700699806213, 0.30763399600982666], [0.465828001499176, 0.22080999612808228], [0.4723289906978607, 0.26377400755882263], [0.47308701276779175, 0.2821429967880249], [0.4731220006942749, 0.2953740060329437], [0.47303301095962524, 0.30472201108932495], [0.4279420077800751, 0.30472201108932495], [0.4264790117740631, 0.29646000266075134], [0.4231620132923126, 0.2881540060043335], [0.4183090031147003, 0.2799369990825653], [0.3900949954986572, 0.36042699217796326], [0.013953999616205692, 0.43996599316596985], [0.4999139904975891, 0.41985300183296204], [0.4131999909877777, 0.3046000003814697], [0.4096260070800781, 0.29817700386047363], [0.4680800139904022, 0.39846500754356384], [0.4227289855480194, 0.414014995098114], [0.4630799889564514, 0.40621599555015564], [0.3721199929714203, 0.5265859961509705], [0.3345620036125183, 0.5039269924163818], [0.4116710126399994, 0.45303499698638916], [0.24217599630355835, 0.8523240089416504], [0.2907769978046417, 0.798554003238678], [0.32733801007270813, 0.7434729933738708], [0.399509996175766, 0.2510789930820465], [0.44172799587249756, 0.738323986530304], [0.429764986038208, 0.8121659755706787], [0.412198007106781, 0.8910989761352539], [0.2889550030231476, 0.6010479927062988], [0.2189369946718216, 0.5645890235900879], [0.4127820134162903, 0.6010299921035767], [0.2571350038051605, 0.6445599794387817], [0.4276849925518036, 0.5620390176773071], [0.4483399987220764, 0.4630639851093292], [0.17856000363826752, 0.5424460172653198], [0.24730800092220306, 0.5428060293197632], [0.2862670123577118, 0.532325029373169], [0.33282798528671265, 0.5392879843711853], [0.3687559962272644, 0.552793025970459], [0.398963987827301, 0.5673450231552124], [0.47641000151634216, 0.5941939949989319], [0.18924100697040558, 0.47607600688934326], [0.2289620041847229, 0.651049017906189], [0.4907259941101074, 0.4375990033149719], [0.40467000007629395, 0.5148670077323914], [0.0194690003991127, 0.5984359979629517], [0.42624300718307495, 0.5795689821243286], [0.3969930112361908, 0.45120298862457275], [0.2664699852466583, 0.6230229735374451], [0.4391210079193115, 0.4810419976711273], [0.0323139987885952, 0.35564300417900085], [0.4190540015697479, 0.6128450036048889], [0.46278300881385803, 0.494253009557724], [0.23897899687290192, 0.22025500237941742], [0.19822099804878235, 0.1680620014667511], [0.1075500026345253, 0.4592449963092804], [0.1836100071668625, 0.25974300503730774], [0.13440999388694763, 0.6663169860839844], [0.3857640027999878, 0.11684600263834], [0.4909670054912567, 0.42062199115753174], [0.3823849856853485, 0.4914270043373108], [0.1743990033864975, 0.6023290157318115], [0.31878501176834106, 0.6037650108337402], [0.34336400032043457, 0.5994030237197876], [0.3961000144481659, 0.2897830009460449], [0.18788500130176544, 0.4114620089530945], [0.43098700046539307, 0.05593499913811684], [0.3189930021762848, 0.10171499848365784], [0.2662479877471924, 0.13029900193214417], [0.5000230073928833, 0.8094239830970764], [0.4999769926071167, 0.0455470010638237], [0.3661699891090393, 0.601177990436554], [0.39320701360702515, 0.6044629812240601], [0.4103730022907257, 0.6089199781417847], [0.1949930042028427, 0.6578980088233948], [0.38866499066352844, 0.6377159953117371], [0.3659619987010956, 0.6440290212631226], [0.34336400032043457, 0.6446430087089539], [0.31878501176834106, 0.6416599750518799], [0.30141499638557434, 0.6368439793586731], [0.058132998645305634, 0.6809239983558655], [0.30141499638557434, 0.6125509738922119], [0.49998798966407776, 0.38156598806381226], [0.41583800315856934, 0.37580400705337524], [0.44568198919296265, 0.43392300605773926], [0.4658440053462982, 0.37935900688171387], [0.4999229907989502, 0.6484760046005249], [0.2887189984321594, 0.18005399405956268], [0.3352789878845215, 0.1471800059080124], [0.4405120015144348, 0.09758099913597107], [0.12829400599002838, 0.20805899798870087], [0.40877199172973633, 0.6261060237884521], [0.45560699701309204, 0.5481989979743958], [0.499877005815506, 0.09100999683141708], [0.3754369914531708, 0.07580800354480743], [0.11421000212430954, 0.3849779963493347], [0.44866201281547546, 0.30472201108932495], [0.44802001118659973, 0.2953679859638214], [0.44711199402809143, 0.2841919958591461], [0.4448319971561432, 0.2692059874534607], [0.4300119876861572, 0.23319099843502045], [0.4067870080471039, 0.3143270015716553], [0.400738000869751, 0.3189310133457184], [0.39239999651908875, 0.32229700684547424], [0.3678559958934784, 0.33608099818229675], [0.24792300164699554, 0.39866700768470764], [0.4527699947357178, 0.5791500210762024], [0.43639200925827026, 0.6401129961013794], [0.41616401076316833, 0.6312860250473022], [0.4133859872817993, 0.30763399600982666], [0.22801800072193146, 0.316428005695343], [0.4682680070400238, 0.6473289728164673], [0.4113619923591614, 0.19567300379276276], [0.49998900294303894, 0.530174970626831], [0.47915399074554443, 0.557345986366272], [0.49997401237487793, 0.5603629946708679], [0.4321120083332062, 0.5064110159873962], [0.49988600611686707, 0.13308300077915192], [0.4999130070209503, 0.17827099561691284], [0.4565489888191223, 0.18079900741577148], [0.3445490002632141, 0.25456100702285767], [0.37890899181365967, 0.4259899854660034], [0.3742929995059967, 0.21981500089168549], [0.31968799233436584, 0.4292620122432709], [0.3571549952030182, 0.39572998881340027], [0.2952840030193329, 0.37841901183128357], [0.4477500021457672, 0.13752299547195435], [0.4109860062599182, 0.4912770092487335], [0.3139509856700897, 0.22469200193881989], [0.35412800312042236, 0.18744699656963348], [0.32454800605773926, 0.2960070073604584], [0.18909600377082825, 0.35370001196861267], [0.27977699041366577, 0.2853420078754425], [0.13382300734519958, 0.3172990083694458], [0.3367680013179779, 0.3552669882774353], [0.4298839867115021, 0.5334780216217041], [0.45552799105644226, 0.4513770043849945], [0.43711400032043457, 0.441103994846344], [0.46728798747062683, 0.47007501125335693], [0.41471201181411743, 0.6647800207138062], [0.37704598903656006, 0.6772220134735107], [0.344107985496521, 0.6798490285873413], [0.31287598609924316, 0.6776679754257202], [0.2835260033607483, 0.6668099761009216], [0.24124599993228912, 0.617214024066925], [0.10298600047826767, 0.531237006187439], [0.2676120102405548, 0.575439989566803], [0.29787901043891907, 0.5668240189552307], [0.33343398571014404, 0.5661219954490662], [0.3664270043373108, 0.5738840103149414], [0.39601200819015503, 0.5833039879798889], [0.4201210141181946, 0.5897719860076904], [0.0075610000640153885, 0.5192229747772217], [0.4329490065574646, 0.43048200011253357], [0.458638995885849, 0.5209109783172607], [0.47346600890159607, 0.45425599813461304], [0.4760879874229431, 0.4361700117588043], [0.4684720039367676, 0.44494301080703735], [0.4339909851551056, 0.41763800382614136], [0.48351800441741943, 0.43701601028442383], [0.48248299956321716, 0.42215099930763245], [0.4264500141143799, 0.6102010011672974], [0.4389989972114563, 0.60350501537323], [0.45006701350212097, 0.5995659828186035], [0.28971201181411743, 0.6317470073699951], [0.27667000889778137, 0.6366270184516907], [0.5178620219230652, 0.5280519723892212], [0.7102879881858826, 0.6192359924316406], [0.5262269973754883, 0.4260900020599365], [0.8950930237770081, 0.7458590269088745], [0.6340699791908264, 0.5904240012168884], [0.6612420082092285, 0.5869749784469604], [0.6888800263404846, 0.5905399918556213], [0.7253419756889343, 0.6108689904212952], [0.6066300272941589, 0.5962949991226196], [0.6547660231590271, 0.6559889912605286], [0.6299059987068176, 0.6539239883422852], [0.6806780099868774, 0.6527349948883057], [0.7020969986915588, 0.6464089751243591], [0.7522119879722595, 0.5891950130462646], [0.6029180288314819, 0.15713700652122498], [0.719901978969574, 0.6244000196456909], [0.8936929702758789, 0.6000400185585022], [0.7900819778442383, 0.6086459755897522], [0.6439980268478394, 0.4655120074748993], [0.5282490253448486, 0.3495959937572479], [0.5258499979972839, 0.3198089897632599], [0.5602149963378906, 0.3427709937095642], [0.5853840112686157, 0.3334589898586273], [0.5496259927749634, 0.3191390037536621], [0.57122802734375, 0.3173080086708069], [0.6248520016670227, 0.27190101146698], [0.5130500197410583, 0.45271798968315125], [0.5150970220565796, 0.4727480113506317], [0.7422469854354858, 0.685492992401123], [0.5986310243606567, 0.5450209975242615], [0.5703380107879639, 0.4514249861240387], [0.5786319971084595, 0.46637699007987976], [0.7230870127677917, 0.46794599294662476], [0.5164459943771362, 0.5003610253334045], [0.6628010272979736, 0.7170820236206055], [0.7036240100860596, 0.706728994846344], [0.8307049870491028, 0.8061860203742981], [0.5523859858512878, 0.6974319815635681], [0.6076099872589111, 0.6461120247840881], [0.6454290151596069, 0.30329298973083496], [0.9326949715614319, 0.2698949873447418], [0.5572609901428223, 0.42717400193214417], [0.5429019927978516, 0.41520801186561584], [0.6180260181427002, 0.30528900027275085], [0.6075909733772278, 0.3057970106601715], [0.7229430079460144, 0.7280369997024536], [0.5774139761924744, 0.436832994222641], [0.6140829920768738, 0.7186130285263062], [0.616907000541687, 0.7441139817237854], [0.6685090065002441, 0.8800860047340393], [0.7700920104980469, 0.7679790258407593], [0.6355360150337219, 0.8107510209083557], [0.7703909873962402, 0.7004439830780029], [0.8267220258712769, 0.7212449908256531], [0.5271210074424744, 0.3338020145893097], [0.5531719923019409, 0.3314729928970337], [0.5772380232810974, 0.32611000537872314], [0.5546919703483582, 0.4199340045452118], [0.6118969917297363, 0.3060390055179596], [0.5969610214233398, 0.29346001148223877], [0.5963709950447083, 0.3060469925403595], [0.5399580001831055, 0.44286099076271057], [0.5688419938087463, 0.30763399600982666], [0.5478180050849915, 0.30763399600982666], [0.5246130228042603, 0.30763399600982666], [0.534089982509613, 0.22085900604724884], [0.5276709794998169, 0.26377400755882263], [0.5269129872322083, 0.2821429967880249], [0.5268779993057251, 0.2953740060329437], [0.5269669890403748, 0.30472201108932495], [0.5720580220222473, 0.30472201108932495], [0.5735210180282593, 0.29646000266075134], [0.5768380165100098, 0.2881540060043335], [0.5816910266876221, 0.2799369990825653], [0.6099449992179871, 0.3600899875164032], [0.9860460162162781, 0.43996599316596985], [0.5867999792098999, 0.3046000003814697], [0.5903720259666443, 0.29817700386047363], [0.531915009021759, 0.39846301078796387], [0.5772680044174194, 0.41406500339508057], [0.5369150042533875, 0.40621399879455566], [0.6275429725646973, 0.5266479849815369], [0.665585994720459, 0.5040490031242371], [0.5883539915084839, 0.45313799381256104], [0.7578240036964417, 0.8523240089416504], [0.7092499732971191, 0.7984920144081116], [0.6726840138435364, 0.7434189915657043], [0.6004089713096619, 0.250995010137558], [0.5582659840583801, 0.7383279800415039], [0.5703039765357971, 0.812129020690918], [0.5881659984588623, 0.8909559845924377], [0.7110450267791748, 0.6010479927062988], [0.7810699939727783, 0.5645949840545654], [0.5872470140457153, 0.6010680198669434], [0.7428699731826782, 0.6445540189743042], [0.5721560120582581, 0.5623480081558228], [0.5518680214881897, 0.4634299874305725], [0.8214420080184937, 0.5424439907073975], [0.752701997756958, 0.542818009853363], [0.7137569785118103, 0.5323730111122131], [0.6671130061149597, 0.5393270254135132], [0.6311010122299194, 0.5528460144996643], [0.6008620262145996, 0.5675269961357117], [0.523481011390686, 0.5943729877471924], [0.8107479810714722, 0.4760740101337433], [0.771045982837677, 0.6510409712791443], [0.5091270208358765, 0.437281996011734], [0.5952929854393005, 0.5149760246276855], [0.9805309772491455, 0.5984359979629517], [0.5734999775886536, 0.5799999833106995], [0.602994978427887, 0.45131200551986694], [0.7335299849510193, 0.6230229735374451], [0.5606110095977783, 0.4809829890727997], [0.9676859974861145, 0.35564300417900085], [0.5809850096702576, 0.6128399968147278], [0.5377280116081238, 0.49461498856544495], [0.7609660029411316, 0.22024700045585632], [0.8017789721488953, 0.1680620014667511], [0.8924409747123718, 0.45923900604248047], [0.8163509964942932, 0.2597399950027466], [0.8655949831008911, 0.6663129925727844], [0.6140739917755127, 0.11675400286912918], [0.5089529752731323, 0.4205619990825653], [0.6179419755935669, 0.4916839897632599], [0.8256080150604248, 0.6023250222206116], [0.6812149882316589, 0.6037650108337402], [0.6566359996795654, 0.5994030237197876], [0.6039000153541565, 0.2897830009460449], [0.8120859861373901, 0.4114609956741333], [0.5680130124092102, 0.055435001850128174], [0.681007981300354, 0.10171499848365784], [0.7337520122528076, 0.13029900193214417], [0.6338300108909607, 0.601177990436554], [0.6067929863929749, 0.6044629812240601], [0.5896599888801575, 0.6089379787445068], [0.8050159811973572, 0.6578919887542725], [0.6113349795341492, 0.6377159953117371], [0.634037971496582, 0.6440290212631226], [0.6566359996795654, 0.6446430087089539], [0.6812149882316589, 0.6416599750518799], [0.6985849738121033, 0.6368439793586731], [0.9418669939041138, 0.6809239983558655], [0.6985849738121033, 0.6125509738922119], [0.5841770172119141, 0.3758929967880249], [0.5543180108070374, 0.43392300605773926], [0.5341539978981018, 0.37935999035835266], [0.711217999458313, 0.18002499639987946], [0.6646299958229065, 0.14712899923324585], [0.5590999722480774, 0.09736800193786621], [0.8717060089111328, 0.20805899798870087], [0.591234028339386, 0.6261060237884521], [0.5443410277366638, 0.548416018486023], [0.6245629787445068, 0.07580800354480743], [0.8857700228691101, 0.3849709928035736], [0.5513380169868469, 0.30472201108932495], [0.5519800186157227, 0.2953679859638214], [0.5528879761695862, 0.2841919958591461], [0.5551679730415344, 0.2692059874534607], [0.5699440240859985, 0.23296500742435455], [0.5932030081748962, 0.3143239915370941], [0.599261999130249, 0.3189310133457184], [0.6075999736785889, 0.32229700684547424], [0.6319379806518555, 0.33649998903274536], [0.752032995223999, 0.3986850082874298], [0.5472260117530823, 0.579604983329773], [0.563543975353241, 0.640172004699707], [0.5838410258293152, 0.6312860250473022], [0.5866140127182007, 0.30763399600982666], [0.7719150185585022, 0.3164219856262207], [0.5315970182418823, 0.6475170254707336], [0.5883709788322449, 0.19555899500846863], [0.5207970142364502, 0.5574349761009216], [0.5679849982261658, 0.5065209865570068], [0.5432829856872559, 0.18074500560760498], [0.6553170084953308, 0.25448501110076904], [0.6210089921951294, 0.4259819984436035], [0.6255599856376648, 0.21968799829483032], [0.6801980137825012, 0.42928099632263184], [0.6427639722824097, 0.39566200971603394], [0.7046629786491394, 0.3784700036048889], [0.552012026309967, 0.13740800321102142], [0.5890719890594482, 0.491362988948822], [0.6859449744224548, 0.22464300692081451], [0.6457350254058838, 0.1873600035905838], [0.6753429770469666, 0.2960219979286194], [0.8108580112457275, 0.35369500517845154], [0.7201219797134399, 0.2853330075740814], [0.8661519885063171, 0.31729501485824585], [0.6631870269775391, 0.35540300607681274], [0.5700820088386536, 0.5336740016937256], [0.5445619821548462, 0.4516240060329437], [0.5627589821815491, 0.44121500849723816], [0.5319870114326477, 0.4698599874973297], [0.5852710008621216, 0.6648229956626892], [0.6229529976844788, 0.6772210001945496], [0.655896008014679, 0.6798369884490967], [0.6871320009231567, 0.6776540279388428], [0.7164819836616516, 0.666799008846283], [0.7587569952011108, 0.6172130107879639], [0.8970130085945129, 0.5312309861183167], [0.7323920130729675, 0.575452983379364], [0.7021139860153198, 0.5668370127677917], [0.6665250062942505, 0.566133975982666], [0.6335049867630005, 0.5739120244979858], [0.603875994682312, 0.5834130048751831], [0.5796579718589783, 0.590054988861084], [0.9924399852752686, 0.5192229747772217], [0.567192018032074, 0.4305799901485443], [0.5413659811019897, 0.5211009979248047], [0.5265640020370483, 0.45388200879096985], [0.5239130258560181, 0.4361700117588043], [0.5315290093421936, 0.44494301080703735], [0.5660359859466553, 0.41767099499702454], [0.51631098985672, 0.43694600462913513], [0.5174720287322998, 0.422122985124588], [0.5735949873924255, 0.6101930141448975], [0.5606979727745056, 0.6046680212020874], [0.5497559905052185, 0.6002489924430847], [0.7102879881858826, 0.6317470073699951], [0.723330020904541, 0.6366270184516907] ]


def generate_preview(landmarks, image: np.ndarray) -> np.ndarray:
    
    annotated_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    
    drawing_spec = solutions.drawing_utils.DrawingSpec(
        thickness=1, circle_radius=1, color=(0, 0, 255)
    )

    solutions.drawing_utils.draw_landmarks(
        image=annotated_image,
        landmark_list=landmarks,
        connections=solutions.face_mesh.FACEMESH_TESSELATION,
        landmark_drawing_spec=drawing_spec,
        connection_drawing_spec=solutions.drawing_styles.get_default_face_mesh_tesselation_style(),
    )

    return annotated_image


def nodes_faces() -> np.ndarray:
    return np.array(canonical_indices)


def nodes_uvs() -> np.ndarray:
    return np.array(canonical_uvs)


def image_to_nodes(face_img: np.ndarray):
    with solutions.face_mesh.FaceMesh( 
            max_num_faces=1,
            refine_landmarks=True,
            static_image_mode=True,
            min_detection_confidence=0.5,
        ) as face_mesh:
        results = face_mesh.process(face_img)

        if not results.multi_face_landmarks:
            return None
        
        [face_landmarks] = results.multi_face_landmarks

    # preview: np.ndarray = generate_preview(landmarks=face_landmarks, image=face_img)

    nodes = np.stack(
        [[landmark.x, landmark.y, landmark.z] for landmark in face_landmarks.landmark]
    )

    # make sure it allways returns 468 landmarks and not 478
    if nodes.shape[0] > 468:
        nodes = nodes[:468, :]

    return nodes


def nodes_colors(nodes: np.ndarray, image: np.ndarray) -> np.ndarray:
    h, w, _ = image.shape
    pixels = np.clip((nodes[:, :2] * [w, h]).astype(np.int32), 0, [w - 1, h - 1])
    colors = image[pixels[:, 1], pixels[:, 0], :]
    return colors


def barycentric_coords(p: np.ndarray, a: np.ndarray, b: np.ndarray, c: np.ndarray) -> np.ndarray:
    v0 = b - a
    v1 = c - a
    v2 = p - a

    d00 = np.dot(v0, v0)
    d01 = np.dot(v0, v1)
    d11 = np.dot(v1, v1)
    d20 = np.dot(v2, v0)
    d21 = np.dot(v2, v1)

    denom = d00 * d11 - d01 * d01
    if denom == 0:
        return np.array([-1, -1, -1])  # Degenerate triangle
    
    v = (d11 * d20 - d01 * d21) / denom
    w = (d00 * d21 - d01 * d20) / denom
    u = 1.0 - v - w
    return np.array([u, v, w])


def find_triangle(uv: np.ndarray, faces: np.ndarray, uvs: np.ndarray) -> int | None:
    for i, face in enumerate(faces):
        uv0 = uvs[face[0]]
        uv1 = uvs[face[1]]
        uv2 = uvs[face[2]]

        bary_coords = barycentric_coords(uv, uv0, uv1, uv2)
        if np.all(bary_coords >= 0):
            return i
    return None


# given the original image and the detected nodes, create a new square texture image that unwraps the face on the original image
def unwarp_texture(face_img: np.ndarray, nodes: np.ndarray, texture_size: int = 512, filter_occluded=False, faces=None, canonical_uv=None) -> np.ndarray:
    """Fast vectorized texture unwrapping using precomputed mapping."""
    h, w, _ = face_img.shape
    
    # Get face triangles and UV coordinates
    if faces is None:
        faces = nodes_faces()

    if canonical_uv is None:
        canonical_uv = nodes_uvs()

    nodes_xy = nodes[:, :2]
    
    # Create output texture with alpha channel
    texture = np.zeros((texture_size, texture_size, 4), dtype=np.uint8)
    
    # Create coordinate grids for the entire texture
    u_coords = np.linspace(0, 1, texture_size, endpoint=False) + 0.5/texture_size
    v_coords = np.linspace(0, 1, texture_size, endpoint=False) + 0.5/texture_size
    u_grid, v_grid = np.meshgrid(u_coords, v_coords)
    uv_points = np.stack([u_grid.flatten(), v_grid.flatten()], axis=1)
    
    # Initialize mapping arrays
    valid_mask = np.zeros(texture_size * texture_size, dtype=bool)
    map_x = np.zeros(texture_size * texture_size, dtype=np.float32)
    map_y = np.zeros(texture_size * texture_size, dtype=np.float32)
    
    # Process all triangles in parallel
    for face in faces:
        # Get triangle vertices
        uv_tri = canonical_uv[face]
        img_tri = nodes_xy[face]
        
        # Vectorized point-in-triangle test
        v0 = uv_tri[1] - uv_tri[0]
        v1 = uv_tri[2] - uv_tri[0]
        v2 = uv_points - uv_tri[0]
        
        # Compute barycentric coordinates for all points
        dot00 = np.dot(v0, v0)
        dot01 = np.dot(v0, v1)
        dot11 = np.dot(v1, v1)
        
        denom = dot00 * dot11 - dot01 * dot01
        if abs(denom) < 1e-12:
            continue
            
        inv_denom = 1.0 / denom
        dot20 = np.sum(v2 * v0, axis=1)
        dot21 = np.sum(v2 * v1, axis=1)
        
        bary_u = (dot11 * dot20 - dot01 * dot21) * inv_denom
        bary_v = (dot00 * dot21 - dot01 * dot20) * inv_denom
        bary_w = 1.0 - bary_u - bary_v
        
        # Find points inside triangle
        inside = (bary_u >= -1e-6) & (bary_v >= -1e-6) & (bary_w >= -1e-6)
        
        if not np.any(inside):
            continue
            
        # Compute image coordinates for points inside triangle
        img_coords = (bary_w[inside, np.newaxis] * img_tri[0] + 
                     bary_u[inside, np.newaxis] * img_tri[1] + 
                     bary_v[inside, np.newaxis] * img_tri[2])
        
        # Store mapping
        inside_indices = np.where(inside)[0]
        valid_mask[inside_indices] = True
        map_x[inside_indices] = img_coords[:, 0] * (w - 1)
        map_y[inside_indices] = img_coords[:, 1] * (h - 1)
    
    # Reshape mapping arrays
    map_x = map_x.reshape(texture_size, texture_size)
    map_y = map_y.reshape(texture_size, texture_size)
    valid_mask = valid_mask.reshape(texture_size, texture_size)
    
    # Clamp coordinates
    map_x = np.clip(map_x, 0, w - 1)
    map_y = np.clip(map_y, 0, h - 1)
    
    # Use OpenCV's fast remap for interpolation (RGB channels only)
    texture_rgb = cv2.remap(face_img, map_x.astype(np.float32), map_y.astype(np.float32), 
                           cv2.INTER_LINEAR, borderMode=cv2.BORDER_CONSTANT)

    # Copy RGB channels to RGBA texture
    texture[:, :, :3] = texture_rgb
    
    # Initialize alpha channel to full opacity using valid mask
    texture[:, :, 3] = (valid_mask * 255).astype(np.uint8)
    
    # compute normal for each face
    if filter_occluded:
        face_normals = np.cross(
            nodes[faces[:, 1], :3] - nodes[faces[:, 0], :3],
            nodes[faces[:, 2], :3] - nodes[faces[:, 0], :3]
        )
        face_normals /= np.linalg.norm(face_normals, axis=1, keepdims=True) + 1e-8
        
        # determine if face is front-facing
        view_direction = np.array([0, 0, 1])
        front_facing = face_normals[:, 2] < -0.375

        # front_facing = np.einsum('ij,j->i', face_normals, view_direction) < -0.3

        face_validity = np.zeros(faces.shape[0], dtype=bool)
        face_validity[front_facing] = True
        
        # create a mask of valid pixels for alpha channel
        alpha_mask = np.zeros((texture_size, texture_size), dtype=np.uint8)
        for i, face in enumerate(faces):
            if face_validity[i]:
                # rasterize triangle to alpha mask
                uv_tri = (canonical_uv[face] * texture_size).astype(np.int32)
                cv2.fillConvexPoly(alpha_mask, uv_tri, 255)

        # apply face validity to alpha channel (take the minimum value)
        texture[:, :, 3] = np.minimum(texture[:, :, 3], alpha_mask)
        
    # flip texture vertically to match UV coordinate system
    texture = cv2.flip(texture, 0)
    
    return texture


def extract_points(landmarks, indexes, translate=(0,0), scale=(1.0, 1.0)) -> np.ndarray:
    points = np.array([landmarks.landmark[i] for i in indexes])
    points = np.array([[p.x * scale[0] + translate[0], p.y * scale[1] + translate[1]] for p in points])
    return points.astype(np.float32)


def image_to_guidelines(image: np.ndarray, translate: tuple = (0, 0), scale: tuple = (1.0, 1.0)) -> np.ndarray:
    with solutions.face_mesh.FaceMesh( 
        static_image_mode=True, 
        max_num_faces=1, 
        refine_landmarks=True, 
        min_detection_confidence=0.5, 
        ) as face_mesh:
        results = face_mesh.process(image)

        if not results.multi_face_landmarks:
            return []
        
        [face_landmarks] = results.multi_face_landmarks

    guidelines = []

    # # jaw_line
    # jaw_line_indeces = [234, 93, 132, 58, 172, 136, 150, 149, 176, 148, 152, 377, 400, 378, 379, 365, 397, 288, 361, 323, 454, 356]
    # guidelines.append(extract_points(face_landmarks, jaw_line_indeces, translate, scale))

    # middle line
    # middle_line_indeces = [10, 151, 9, 8, 168, 6, 197, 195, 5, 4, 1, 19, 94, 2, 164, 0, 11, 12, 13, 14, 15, 16, 17, 18, 200, 199, 175, 152]
    middle_line_indeces = [10, 9, 168, 6, 4, 1, 13, 17, 152]
    guidelines.append(extract_points(face_landmarks, middle_line_indeces, translate, scale))

    # eyebrow line
    eyebrow_indeces = [70, 63, 105, 66, 107, 9, 336, 296, 334, 293, 300]
    # eyebrow_indeces = [70, 63, 66, 9, 296, 293, 300] 
    guidelines.append(extract_points(face_landmarks, eyebrow_indeces, translate, scale))

    # bottom of the nose
    nose_indeces = [97, 2, 326]
    guidelines.append(extract_points(face_landmarks, nose_indeces, translate, scale))

    # top lip line
    top_lip_indeces = [78, 13, 308]
    guidelines.append(extract_points(face_landmarks, top_lip_indeces, translate, scale))

    # bottom lip line
    bottom_lip_indeces = [84, 17, 314]
    guidelines.append(extract_points(face_landmarks, bottom_lip_indeces, translate, scale))


    return guidelines